# Net Dollar Retention (NDR) Analytics Product Specification
## Using Snowflake Semantic Views with dbt

## Executive Summary

This specification outlines the implementation of a comprehensive Net Dollar Retention (NDR) analytics solution using dbt models and Snowflake's native Semantic Views. The solution enables business users to analyze customer retention and expansion metrics through natural language queries via Cortex Analyst while maintaining data consistency and governance.

## 1. Business Context

### 1.1 What is NDR?

Net Dollar Retention (NDR) measures the revenue retained from existing customers over time, accounting for both expansion (upsells, cross-sells) and contraction (downgrades, churn). It's a critical SaaS metric that indicates product-market fit and growth efficiency.

**Formula**: `NDR = (Current Period ARR from Cohort) / (Prior Period ARR from Same Cohort) × 100`

### 1.2 Key Business Questions

- **Current State**: What is our latest NDR?
- **Segmentation**: How does NDR vary by customer segment (size, trade, market)?
- **Product Performance**: Which product categories drive the best retention?
- **Trend Analysis**: How has NDR evolved over the past 12 months?
- **Cohort Analysis**: What's the NDR for specific customer cohorts?

## 2. Data Architecture

### 2.1 Source Data Model

```sql
-- Core staging table containing monthly ARR snapshots
DSV_ODS.FINANCE.STG_METRICS_ST_NDR_L3M
├── ndr_parent (STRING)           -- Parent account identifier
├── child_tenant_id (STRING)      -- Child tenant identifier
├── month_id (INTEGER)            -- Format: YYYYMM (e.g., 202508)
├── billing_month (DATE)          -- First day of billing month
├── L3M_ARR (DECIMAL)            -- Last 3 months ARR (annualized)
└── load_date (TIMESTAMP)        -- Data load timestamp

-- Customer dimension table
DSV_WAREHOUSE.FINANCE.FACT_METRICS_acme_CUSTOMER_CUBE
├── PARENT_ACCOUNT_ID (STRING)    -- Links to ndr_parent
├── CHILD_ACCOUNT_ID (STRING)
├── MONTH_ID (INTEGER)
├── BILLING_MONTH (DATE)
├── SIZE_SEGMENT (STRING)         -- SMB, Mid-Market, Enterprise
├── MARKET_SEGMENT (STRING)       -- Geographic/vertical market
├── TRADE_SEGMENT (STRING)        -- HVAC, Plumbing, Electrical, etc.
├── PRODUCT_CATEGORY (STRING)     -- Core, Add-ons, Premium
├── MONTHLY_AMOUNT (DECIMAL)
└── L3M (DECIMAL)
```

### 2.2 Historical Snapshot Requirements

For accurate historical analysis, we need point-in-time parent-child relationships:

```sql
DSV_ODS.FINANCE.PARENT_CHILD_SNAPSHOT
├── snapshot_date (DATE)
├── parent_account_id (STRING)
├── child_account_id (STRING)
├── relationship_start_date (DATE)
├── relationship_end_date (DATE)
└── is_current (BOOLEAN)
```

## 3. dbt Model Implementation

### 3.1 Model Structure

```yaml
models/
├── staging/
│   ├── finance/
│   │   ├── stg_finance__ndr_base.sql
│   │   ├── stg_finance__customer_cube.sql
│   │   └── stg_finance__parent_child_snapshot.sql
│   └── _finance__sources.yml
├── intermediate/
│   ├── finance/
│   │   ├── int_ndr__arr_by_parent.sql
│   │   ├── int_ndr__prior_year_base.sql
│   │   ├── int_ndr__cohort_expansion.sql
│   │   └── int_ndr__calculations.sql
│   └── _int_finance__models.yml
├── marts/
│   ├── finance/
│   │   ├── fct_ndr_metrics.sql
│   │   ├── fct_ndr_by_segment.sql
│   │   └── fct_ndr_trends.sql
│   └── _marts_finance__models.yml
└── semantic/
    ├── ndr_semantic_view.sql
    └── _semantic__models.yml
```

### 3.2 Custom Semantic View Materialization

Create a macro for semantic view materialization in `macros/semantic_views.sql`:

```sql
{% materialization semantic_view, default %}
  {%- set identifier = model.name -%}
  {%- set target_relation = api.Relation.create(
      database=database,
      schema=schema,
      identifier=identifier,
      type='view') -%}

  {{ run_hooks(pre_hooks) }}

  {% call statement('create') -%}
    CREATE OR REPLACE SEMANTIC VIEW {{ target_relation }}
    {{ sql }}
    COPY GRANTS
  {%- endcall %}

  {{ run_hooks(post_hooks) }}
  {{ return({'relations': [target_relation]}) }}
{% endmaterialization %}
```

### 3.3 Staging Models

#### stg_finance__ndr_base.sql
```sql
{{
    config(
        materialized='view',
        tags=['finance', 'ndr']
    )
}}

WITH source AS (
    SELECT * 
    FROM {{ source('finance_ods', 'stg_metrics_st_ndr_l3m') }}
),

renamed AS (
    SELECT
        ndr_parent,
        child_tenant_id,
        month_id,
        billing_month,
        L3M_ARR as l3m_arr,
        load_date,
        -- Add data quality flags
        CASE 
            WHEN L3M_ARR < 0 THEN 'negative_arr'
            WHEN L3M_ARR > 10000000 THEN 'outlier_high'
            ELSE 'valid'
        END as data_quality_flag
    FROM source
    WHERE billing_month < DATE_TRUNC('month', CURRENT_DATE())
)

SELECT * FROM renamed
```

### 3.4 Intermediate Models

#### int_ndr__calculations.sql
```sql
{{
    config(
        materialized='incremental',
        unique_key=['ndr_parent', 'month_id'],
        on_schema_change='fail',
        tags=['finance', 'ndr', 'core']
    )
}}

WITH arr_current AS (
    SELECT
        ndr_parent,
        month_id,
        billing_month,
        SUM(l3m_arr) as current_arr
    FROM {{ ref('stg_finance__ndr_base') }}
    WHERE data_quality_flag = 'valid'
    {% if is_incremental() %}
        AND billing_month >= DATE_TRUNC('month', DATEADD('month', -3, CURRENT_DATE()))
    {% endif %}
    GROUP BY 1, 2, 3
),

arr_prior_year AS (
    SELECT
        c.ndr_parent,
        c.month_id,
        c.billing_month,
        p.current_arr as prior_year_arr
    FROM arr_current c
    LEFT JOIN arr_current p
        ON p.ndr_parent = c.ndr_parent
        AND p.month_id = c.month_id - 100  -- Prior year same month
),

cohort_base AS (
    -- Only include customers who existed in prior year
    SELECT DISTINCT
        ndr_parent,
        month_id - 100 as cohort_month
    FROM arr_current
    WHERE current_arr > 0
),

ndr_calc AS (
    SELECT
        a.ndr_parent,
        a.month_id,
        a.billing_month,
        a.current_arr,
        a.prior_year_arr,
        CASE
            WHEN a.prior_year_arr > 0 
            THEN ROUND((a.current_arr / a.prior_year_arr) * 100, 2)
            ELSE NULL
        END as ndr_percentage,
        a.current_arr - COALESCE(a.prior_year_arr, 0) as arr_change,
        CASE
            WHEN a.prior_year_arr IS NULL THEN 'new_customer'
            WHEN a.current_arr = 0 THEN 'churned'
            WHEN a.current_arr < a.prior_year_arr THEN 'contraction'
            WHEN a.current_arr > a.prior_year_arr THEN 'expansion'
            ELSE 'flat'
        END as customer_movement
    FROM arr_prior_year a
    INNER JOIN cohort_base cb
        ON cb.ndr_parent = a.ndr_parent
        AND cb.cohort_month = a.month_id - 100
)

SELECT * FROM ndr_calc
```

### 3.5 Mart Models

#### fct_ndr_metrics.sql
```sql
{{
    config(
        materialized='table',
        post_hook="GRANT SELECT ON {{ this }} TO ROLE ANALYTICS_VIEWER",
        tags=['finance', 'ndr', 'mart']
    )
}}

WITH ndr_base AS (
    SELECT * FROM {{ ref('int_ndr__calculations') }}
),

customer_attributes AS (
    SELECT DISTINCT
        PARENT_ACCOUNT_ID as ndr_parent,
        FIRST_VALUE(SIZE_SEGMENT) OVER (
            PARTITION BY PARENT_ACCOUNT_ID 
            ORDER BY BILLING_MONTH DESC
        ) as size_segment,
        FIRST_VALUE(MARKET_SEGMENT) OVER (
            PARTITION BY PARENT_ACCOUNT_ID 
            ORDER BY BILLING_MONTH DESC
        ) as market_segment,
        FIRST_VALUE(TRADE_SEGMENT) OVER (
            PARTITION BY PARENT_ACCOUNT_ID 
            ORDER BY BILLING_MONTH DESC
        ) as trade_segment,
        FIRST_VALUE(PRODUCT_CATEGORY) OVER (
            PARTITION BY PARENT_ACCOUNT_ID 
            ORDER BY BILLING_MONTH DESC
        ) as product_category
    FROM {{ ref('stg_finance__customer_cube') }}
),

final AS (
    SELECT
        n.ndr_parent,
        n.month_id,
        n.billing_month,
        n.current_arr,
        n.prior_year_arr,
        n.ndr_percentage,
        n.arr_change,
        n.customer_movement,
        c.size_segment,
        c.market_segment,
        c.trade_segment,
        c.product_category,
        -- Calculate additional metrics
        CASE 
            WHEN n.ndr_percentage >= 120 THEN 'Best in Class'
            WHEN n.ndr_percentage >= 110 THEN 'Great'
            WHEN n.ndr_percentage >= 100 THEN 'Good'
            WHEN n.ndr_percentage >= 90 THEN 'At Risk'
            ELSE 'Critical'
        END as ndr_health_category,
        CURRENT_TIMESTAMP() as last_updated
    FROM ndr_base n
    LEFT JOIN customer_attributes c
        ON n.ndr_parent = c.ndr_parent
)

SELECT * FROM final
```

## 4. Snowflake Semantic View Implementation

### 4.1 Semantic View Model

#### models/semantic/ndr_semantic_view.sql
```sql
{{
    config(
        materialized='semantic_view',
        semantic_view=true
    )
}}

TABLES (
  -- NDR Metrics fact table
  ndr_metrics AS {{ ref('fct_ndr_metrics') }}
    PRIMARY KEY (ndr_parent, month_id)
    WITH SYNONYMS = ('net_dollar_retention', 'retention_metrics', 'ndr')
    COMMENT = 'Net Dollar Retention metrics with customer segments',
  
  -- Customer dimension table
  customers AS {{ ref('stg_finance__customer_cube') }}
    PRIMARY KEY (PARENT_ACCOUNT_ID, MONTH_ID)
    WITH SYNONYMS = ('customer_data', 'accounts', 'customer_segments')
    COMMENT = 'Customer segmentation and attributes'
)

RELATIONSHIPS (
  -- Link NDR metrics to customer data
  ndr_to_customers AS
    ndr_metrics(ndr_parent, month_id) REFERENCES customers(PARENT_ACCOUNT_ID, MONTH_ID)
)

DIMENSIONS (
  -- Time dimensions
  ndr_metrics.billing_month AS billing_month
    WITH SYNONYMS = ('month', 'period', 'date')
    COMMENT = 'Billing month for NDR calculation',
  
  ndr_metrics.month_id AS month_id
    WITH SYNONYMS = ('period_id', 'month_number')
    COMMENT = 'Month identifier in YYYYMM format',
  
  -- Customer dimensions
  ndr_metrics.ndr_parent AS customer_id
    WITH SYNONYMS = ('parent_account', 'customer', 'account')
    COMMENT = 'Parent account identifier for NDR calculation',
  
  ndr_metrics.size_segment AS size_segment
    WITH SYNONYMS = ('company_size', 'customer_size', 'size')
    COMMENT = 'Customer size classification: SMB, Mid-Market, Enterprise',
  
  ndr_metrics.trade_segment AS trade_segment
    WITH SYNONYMS = ('trade', 'vertical', 'industry')
    COMMENT = 'Trade vertical: HVAC, Plumbing, Electrical, etc.',
  
  ndr_metrics.market_segment AS market_segment
    WITH SYNONYMS = ('market', 'region', 'geography')
    COMMENT = 'Geographic or market segment',
  
  ndr_metrics.product_category AS product_category
    WITH SYNONYMS = ('product', 'product_line', 'category')
    COMMENT = 'Product category: Core, Add-ons, Premium',
  
  ndr_metrics.customer_movement AS customer_movement
    WITH SYNONYMS = ('movement', 'change_type', 'retention_status')
    COMMENT = 'Customer movement: expansion, contraction, flat, churned',
  
  ndr_metrics.ndr_health_category AS ndr_health
    WITH SYNONYMS = ('health', 'performance', 'retention_health')
    COMMENT = 'NDR performance category: Best in Class, Great, Good, At Risk, Critical'
)

METRICS (
  -- Core NDR metrics
  overall_ndr AS SUM(ndr_metrics.current_arr) / NULLIF(SUM(ndr_metrics.prior_year_arr), 0) * 100
    COMMENT = 'Overall Net Dollar Retention percentage',
  
  average_ndr AS AVG(ndr_metrics.ndr_percentage)
    COMMENT = 'Average NDR across customers',
  
  -- ARR metrics
  total_current_arr AS SUM(ndr_metrics.current_arr)
    COMMENT = 'Total current Annual Recurring Revenue',
  
  total_prior_year_arr AS SUM(ndr_metrics.prior_year_arr)
    COMMENT = 'Total prior year Annual Recurring Revenue',
  
  total_arr_change AS SUM(ndr_metrics.arr_change)
    COMMENT = 'Total year-over-year ARR change',
  
  -- Customer counts
  customer_count AS COUNT(DISTINCT ndr_metrics.ndr_parent)
    COMMENT = 'Number of unique customers',
  
  expanding_customers AS COUNT(DISTINCT CASE WHEN ndr_metrics.customer_movement = 'expansion' THEN ndr_metrics.ndr_parent END)
    COMMENT = 'Number of expanding customers',
  
  contracting_customers AS COUNT(DISTINCT CASE WHEN ndr_metrics.customer_movement = 'contraction' THEN ndr_metrics.ndr_parent END)
    COMMENT = 'Number of contracting customers',
  
  churned_customers AS COUNT(DISTINCT CASE WHEN ndr_metrics.customer_movement = 'churned' THEN ndr_metrics.ndr_parent END)
    COMMENT = 'Number of churned customers',
  
  -- Revenue metrics by movement
  expansion_revenue AS SUM(CASE WHEN ndr_metrics.arr_change > 0 THEN ndr_metrics.arr_change ELSE 0 END)
    COMMENT = 'Revenue from customer expansion',
  
  contraction_revenue AS ABS(SUM(CASE WHEN ndr_metrics.arr_change < 0 THEN ndr_metrics.arr_change ELSE 0 END))
    COMMENT = 'Revenue lost from customer contraction',
  
  -- Health metrics
  best_in_class_count AS COUNT(DISTINCT CASE WHEN ndr_metrics.ndr_health_category = 'Best in Class' THEN ndr_metrics.ndr_parent END)
    COMMENT = 'Customers with Best in Class NDR (>=120%)',
  
  at_risk_count AS COUNT(DISTINCT CASE WHEN ndr_metrics.ndr_health_category IN ('At Risk', 'Critical') THEN ndr_metrics.ndr_parent END)
    COMMENT = 'Customers at risk or critical (<100% NDR)'
)

FILTERS (
  latest_month AS ndr_metrics.billing_month = (SELECT MAX(billing_month) FROM {{ ref('fct_ndr_metrics') }})
    WITH SYNONYMS = ('current', 'latest', 'most_recent')
    COMMENT = 'Filter for the most recent month of data',
  
  last_12_months AS ndr_metrics.billing_month >= DATEADD('month', -12, CURRENT_DATE())
    WITH SYNONYMS = ('ttm', 'trailing_twelve', 'past_year')
    COMMENT = 'Filter for trailing 12 months',
  
  enterprise_only AS ndr_metrics.size_segment = 'Enterprise'
    WITH SYNONYMS = ('large_customers', 'enterprise_segment')
    COMMENT = 'Filter for Enterprise customers only',
  
  positive_ndr AS ndr_metrics.ndr_percentage >= 100
    WITH SYNONYMS = ('growing', 'expanding', 'positive_retention')
    COMMENT = 'Filter for customers with positive net retention'
)

COMMENT = 'Net Dollar Retention semantic view for analyzing customer revenue retention, expansion, and contraction patterns across various business segments'
```

### 4.2 Schema Configuration

#### models/semantic/_semantic__models.yml
```yaml
version: 2

models:
  - name: ndr_semantic_view
    description: |
      Comprehensive semantic view for Net Dollar Retention analytics, enabling natural language 
      queries through Cortex Analyst about customer retention, expansion, and contraction patterns.
    
    meta:
      semantic_view: true
      cortex_analyst_enabled: true
      business_domain: revenue_analytics
      deployment_method: dbt_run
    
    config:
      materialized: semantic_view
      post_hook: 
        - "GRANT USAGE ON SEMANTIC VIEW {{ this }} TO ROLE ANALYTICS_VIEWER"
        - "GRANT USAGE ON SEMANTIC VIEW {{ this }} TO ROLE CORTEX_ANALYST_USER"
    
    tests:
      - dbt_utils.recency:
          datepart: month
          field: billing_month
          interval: 2
```

## 5. Deployment and Usage

### 5.1 Deployment Steps

```bash
# Step 1: Build the underlying dbt models
dbt run --select +fct_ndr_metrics

# Step 2: Deploy the semantic view using custom materialization
dbt run --select ndr_semantic_view

# Alternative: Compile and deploy via Snowflake CLI
dbt compile --select ndr_semantic_view
snow sql -f target/compiled/[project_name]/models/semantic/ndr_semantic_view.sql
```

### 5.2 Query Examples

#### Natural Language Queries (Cortex Analyst)
- "What is the latest NDR?"
- "Show me NDR by size segment for the last 12 months"
- "Which trade segment has the best retention?"
- "How many customers are expanding vs contracting?"
- "What's the NDR trend for Enterprise customers?"

#### SQL Queries via Semantic View

```sql
-- Latest NDR overall
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    METRICS overall_ndr, customer_count, expansion_revenue, contraction_revenue
    FILTERS latest_month
);

-- NDR by size segment
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS size_segment
    METRICS overall_ndr, customer_count, total_current_arr
    FILTERS latest_month
) ORDER BY customer_count DESC;
```

### 7.2 dbt Tests Configuration

#### models/marts/finance/_marts_finance__models.yml
```yaml
models:
  - name: fct_ndr_metrics
    description: Final NDR metrics table with all dimensions
    
    columns:
      - name: ndr_parent
        description: Parent account identifier
        tests:
          - not_null
          - unique:
              config:
                where: "billing_month = (SELECT MAX(billing_month) FROM {{ this }})"
                
      - name: month_id
        description: Year-month identifier (YYYYMM)
        tests:
          - not_null
          
      - name: ndr_percentage
        description: Net Dollar Retention percentage
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 300
              inclusive: true
              
      - name: customer_movement
        description: Customer movement category
        tests:
          - accepted_values:
              values: ['new_customer', 'churned', 'contraction', 'expansion', 'flat']
              
    tests:
      - dbt_utils.recency:
          datepart: month
          field: billing_month
          interval: 2
```

## 8. Query Patterns and Use Cases

### 8.1 Cortex Analyst Natural Language Examples

**Executive Questions:**
- "What is our current net dollar retention?"
- "Show me NDR trends over the past year"
- "Which customer segments have the best retention?"
- "How much revenue are we losing from contracting customers?"

**Operational Questions:**
- "List all Enterprise customers with NDR below 100%"
- "What's the NDR for HVAC customers in the West region?"
- "Show me month-over-month NDR changes"
- "Which product categories drive the highest expansion?"

**Strategic Questions:**
- "Compare NDR across all size segments for the last quarter"
- "What percentage of customers are expanding vs contracting?"
- "Show me the correlation between product category and retention"
- "Which market segments are at risk?"

### 8.2 Direct SQL Queries Using Semantic View

```sql
-- Executive Dashboard Query
WITH latest_metrics AS (
    SELECT * FROM SEMANTIC_VIEW(
        ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
        METRICS 
            overall_ndr,
            customer_count,
            expanding_customers,
            contracting_customers,
            churned_customers,
            expansion_revenue,
            contraction_revenue,
            total_current_arr
        FILTERS latest_month
    )
)
SELECT 
    overall_ndr AS "Overall NDR %",
    customer_count AS "Total Customers",
    ROUND(expanding_customers * 100.0 / customer_count, 1) AS "% Expanding",
    ROUND(contracting_customers * 100.0 / customer_count, 1) AS "% Contracting",
    expansion_revenue AS "Expansion Revenue",
    contraction_revenue AS "Contraction Revenue",
    total_current_arr AS "Total ARR"
FROM latest_metrics;

-- Segment Performance Analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS size_segment, trade_segment
    METRICS overall_ndr, customer_count, total_current_arr
    FILTERS latest_month
) 
WHERE customer_count >= 5  -- Filter for statistical significance
ORDER BY overall_ndr DESC;

-- Cohort Trend Analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS billing_month, size_segment
    METRICS overall_ndr, customer_count
    FILTERS last_12_months
) 
PIVOT(
    MAX(overall_ndr) FOR size_segment IN ('SMB', 'Mid-Market', 'Enterprise')
) AS p
ORDER BY billing_month DESC;

-- At-Risk Customer Identification
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS customer_id, size_segment, ndr_health
    METRICS average_ndr
    FILTERS latest_month
)
WHERE ndr_health IN ('At Risk', 'Critical')
ORDER BY average_ndr ASC
LIMIT 50;
```

## 9. Performance Optimization

### 9.1 Materialization Strategy

```yaml
# dbt_project.yml
models:
  analytics:
    staging:
      finance:
        +materialized: view
        +schema: staging
    intermediate:
      finance:
        +materialized: incremental
        +schema: intermediate
        +on_schema_change: fail
        +unique_key: ['ndr_parent', 'month_id']
    marts:
      finance:
        +materialized: table
        +schema: finance
        +post_hook: 
          - "ALTER TABLE {{ this }} CLUSTER BY (billing_month, size_segment)"
          - "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"
    semantic:
        +materialized: semantic_view
        +schema: semantic_models
```

### 9.2 Optimization Scripts

```sql
-- Optimize the main fact table for semantic view queries
ALTER TABLE ANALYTICS.FINANCE.FCT_NDR_METRICS
CLUSTER BY (billing_month, size_segment);

-- Add search optimization for better performance
ALTER TABLE ANALYTICS.FINANCE.FCT_NDR_METRICS
ADD SEARCH OPTIMIZATION ON EQUALITY(ndr_parent, size_segment, trade_segment, market_segment);

-- Create a materialized view for current month metrics
CREATE OR REPLACE MATERIALIZED VIEW ANALYTICS.FINANCE.MV_CURRENT_NDR AS
SELECT *
FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
WHERE billing_month = (
    SELECT MAX(billing_month) 
    FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
);

-- Create aggregate table for faster semantic view queries
CREATE OR REPLACE TABLE ANALYTICS.FINANCE.AGG_NDR_BY_SEGMENT AS
SELECT 
    billing_month,
    size_segment,
    trade_segment,
    market_segment,
    product_category,
    COUNT(DISTINCT ndr_parent) as customer_count,
    SUM(current_arr) as total_current_arr,
    SUM(prior_year_arr) as total_prior_year_arr,
    AVG(ndr_percentage) as avg_ndr_percentage,
    SUM(CASE WHEN customer_movement = 'expansion' THEN 1 ELSE 0 END) as expansion_count,
    SUM(CASE WHEN customer_movement = 'contraction' THEN 1 ELSE 0 END) as contraction_count
FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
GROUP BY 1, 2, 3, 4, 5;
```

## 10. Monitoring and Alerting

### 10.1 Data Quality Monitoring

```sql
-- Create monitoring stored procedure
CREATE OR REPLACE PROCEDURE ANALYTICS.MONITORING.CHECK_NDR_HEALTH()
RETURNS VARCHAR
LANGUAGE SQL
AS
$
DECLARE
    v_latest_month DATE;
    v_overall_ndr FLOAT;
    v_customer_count INT;
    v_data_freshness INT;
    v_alert_message VARCHAR;
BEGIN
    -- Check data freshness
    SELECT 
        MAX(billing_month),
        DATEDIFF('day', MAX(billing_month), CURRENT_DATE())
    INTO 
        v_latest_month,
        v_data_freshness
    FROM ANALYTICS.FINANCE.FCT_NDR_METRICS;
    
    -- Check if data is stale
    IF v_data_freshness > 35 THEN
        v_alert_message := 'WARNING: NDR data is ' || v_data_freshness || ' days old';
        RETURN v_alert_message;
    END IF;
    
    -- Get latest NDR metrics using semantic view
    CREATE OR REPLACE TEMPORARY TABLE temp_ndr_check AS
    SELECT * FROM SEMANTIC_VIEW(
        ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
        METRICS overall_ndr, customer_count
        FILTERS latest_month
    );
    
    SELECT overall_ndr, customer_count
    INTO v_overall_ndr, v_customer_count
    FROM temp_ndr_check;
    
    -- Check for anomalies
    IF v_overall_ndr < 90 THEN
        v_alert_message := 'CRITICAL: NDR dropped below 90% to ' || v_overall_ndr || '%';
        CALL SYSTEM$SEND_EMAIL(
            'ndr_alerts',
            'data-team@company.com',
            'NDR Alert - Critical',
            v_alert_message
        );
    ELSIF v_overall_ndr < 100 THEN
        v_alert_message := 'WARNING: NDR below 100% at ' || v_overall_ndr || '%';
    ELSE
        v_alert_message := 'OK: NDR healthy at ' || v_overall_ndr || '%';
    END IF;
    
    -- Log to monitoring table
    INSERT INTO ANALYTICS.MONITORING.NDR_HEALTH_LOG (
        check_timestamp,
        billing_month,
        overall_ndr,
        customer_count,
        data_freshness_days,
        status,
        message
    ) VALUES (
        CURRENT_TIMESTAMP(),
        v_latest_month,
        v_overall_ndr,
        v_customer_count,
        v_data_freshness,
        CASE 
            WHEN v_overall_ndr < 90 THEN 'CRITICAL'
            WHEN v_overall_ndr < 100 THEN 'WARNING'
            ELSE 'OK'
        END,
        v_alert_message
    );
    
    RETURN v_alert_message;
END;
$;

-- Schedule monitoring task
CREATE OR REPLACE TASK ANALYTICS.MONITORING.NDR_HEALTH_CHECK
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = 'USING CRON 0 8 * * * America/Los_Angeles'
AS
    CALL ANALYTICS.MONITORING.CHECK_NDR_HEALTH();

ALTER TASK ANALYTICS.MONITORING.NDR_HEALTH_CHECK RESUME;
```

### 10.2 Semantic View Usage Tracking

```sql
-- Track semantic view usage
CREATE OR REPLACE VIEW ANALYTICS.MONITORING.SEMANTIC_VIEW_USAGE AS
WITH usage_stats AS (
    SELECT 
        DATE_TRUNC('day', start_time) as query_date,
        user_name,
        query_text,
        total_elapsed_time / 1000 as query_time_seconds,
        bytes_scanned / (1024*1024*1024) as gb_scanned,
        rows_produced
    FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
    WHERE query_text ILIKE '%ndr_semantic_view%'
        AND query_text ILIKE '%SEMANTIC_VIEW%'
        AND start_time >= DATEADD('day', -30, CURRENT_TIMESTAMP())
)
SELECT 
    query_date,
    COUNT(*) as query_count,
    COUNT(DISTINCT user_name) as unique_users,
    AVG(query_time_seconds) as avg_query_time,
    SUM(gb_scanned) as total_gb_scanned,
    AVG(rows_produced) as avg_rows_returned
FROM usage_stats
GROUP BY query_date
ORDER BY query_date DESC;
```

## 11. CI/CD and Deployment

### 11.1 Simple Deployment Workflow

```yaml
# .github/workflows/ndr_deployment.yml
name: NDR Analytics Deployment

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dbt
      run: pip install dbt-snowflake==1.7.0
        
    - name: Deploy Models and Semantic View
      run: |
        dbt deps
        dbt run --select +fct_ndr_metrics --target prod
        dbt run --select ndr_semantic_view --target prod
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
```

### 11.2 dbt Cloud Job Configuration

```json
{
  "name": "NDR Daily Refresh",
  "execute_steps": [
    "dbt run --select +fct_ndr_metrics",
    "dbt run --select ndr_semantic_view"
  ],
  "triggers": {
    "schedule": {
      "cron": "0 6 * * *"
    }
  }
}
```

## 12. Quick Start Guide

### 12.1 Setup Instructions

```bash
# 1. Clone the repository
git clone [repository_url]
cd ndr-analytics

# 2. Install dbt
pip install dbt-snowflake==1.7.0

# 3. Configure profiles.yml
cat > ~/.dbt/profiles.yml << EOF
ndr_analytics:
  outputs:
    dev:
      type: snowflake
      account: [your_account]
      user: [your_user]
      password: [your_password]
      role: ANALYTICS_ROLE
      database: ANALYTICS
      warehouse: COMPUTE_WH
      schema: STAGING
  target: dev
EOF

# 4. Install dependencies
dbt deps

# 5. Build models and semantic view
dbt run --select +ndr_semantic_view

# 6. Test the semantic view
snow sql -q "SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    METRICS overall_ndr, customer_count
    FILTERS latest_month
)"
```

### 12.2 Using the NDR Analytics

#### Via Cortex Analyst (Natural Language)
1. Open Snowsight
2. Navigate to AI & ML > Cortex Analyst
3. Select "NDR Analytics Agent" or use the semantic view directly
4. Ask questions like:
   - "What is our NDR?"
   - "Show NDR by customer segment"
   - "Which segments are expanding?"

#### Via SQL
```sql
-- Current NDR
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    METRICS overall_ndr, customer_count, expansion_revenue, contraction_revenue
    FILTERS latest_month
);

-- NDR by Segment
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS size_segment
    METRICS overall_ndr, customer_count
    FILTERS latest_month
) ORDER BY overall_ndr DESC;

-- Trend Analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS billing_month
    METRICS overall_ndr
    FILTERS last_12_months
) ORDER BY billing_month;
```

### 12.3 Sample Questions for the Agent

**Executive Queries:**
- "What is our net dollar retention rate?"
- "How has NDR trended over the past year?"
- "Which segments drive the most expansion?"

**Operational Queries:**
- "Show me all Enterprise customers with NDR below 100%"
- "What's the NDR for each trade segment?"
- "How many customers are churning vs expanding?"

**Strategic Queries:**
- "Compare retention across all market segments"
- "What products have the best retention?"
- "Which segments are at risk?"

## 13. Best Practices

### 13.1 Semantic View Design
1. **Use Business Language**: Include synonyms that match how users speak
2. **Clear Descriptions**: Provide context for Cortex Analyst
3. **Appropriate Filters**: Pre-define common filter patterns
4. **Performance**: Use clustering on fact tables

### 13.2 Agent Configuration
1. **Comprehensive Instructions**: Guide the agent on business context
2. **Sample Questions**: Provide diverse examples
3. **Tool Descriptions**: Clear descriptions of what each tool does
4. **Response Formatting**: Specify visualization preferences

### 13.3 Data Quality
1. **Validation**: Test edge cases (new customers, churned customers)
2. **Consistency**: Ensure month_id logic is correct (month - 100 = prior year)
3. **Completeness**: Handle missing prior year data appropriately

## Appendix A: Troubleshooting

### Common Issues

**Issue: No data returned from semantic view**
```sql
-- Check underlying data exists
SELECT COUNT(*) FROM ANALYTICS.FINANCE.FCT_NDR_METRICS;

-- Verify semantic view
SHOW SEMANTIC VIEWS IN SCHEMA ANALYTICS.SEMANTIC_MODELS;
```

**Issue: Agent not responding correctly**
```sql
-- Verify agent exists
SHOW AGENTS IN SCHEMA SNOWFLAKE_INTELLIGENCE.AGENTS;

-- Check semantic view access
DESCRIBE SEMANTIC VIEW ANALYTICS.SEMANTIC_MODELS.NDR_SEMANTIC_VIEW;
```

**Issue: NDR calculation seems wrong**
```sql
-- Validate the calculation manually
WITH manual_check AS (
    SELECT 
        ndr_parent,
        billing_month,
        current_arr,
        prior_year_arr,
        ROUND((current_arr / NULLIF(prior_year_arr, 0)) * 100, 2) as calculated_ndr,
        ndr_percentage as stored_ndr
    FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
    WHERE billing_month = (SELECT MAX(billing_month) FROM ANALYTICS.FINANCE.FCT_NDR_METRICS)
)
SELECT * 
FROM manual_check 
WHERE ABS(calculated_ndr - stored_ndr) > 0.01;
```

## Appendix B: Sample Data Validation

```sql
-- Verify sample data generation
SELECT 
    'Months of Data' as metric,
    COUNT(DISTINCT month_id) as value
FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
UNION ALL
SELECT 
    'Unique Customers',
    COUNT(DISTINCT ndr_parent)
FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
UNION ALL
SELECT 
    'Avg NDR %',
    ROUND(AVG(ndr_percentage), 2)
FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
WHERE ndr_percentage IS NOT NULL
UNION ALL
SELECT 
    'Customers > 120% NDR',
    COUNT(DISTINCT ndr_parent)
FROM ANALYTICS.FINANCE.FCT_NDR_METRICS
WHERE ndr_percentage > 120
  AND billing_month = (SELECT MAX(billing_month) FROM ANALYTICS.FINANCE.FCT_NDR_METRICS);
```

## Appendix C: Contact Information

- **Product Owner**: product.owner@company.com
- **Technical Lead**: tech.lead@company.com
- **Data Team Slack**: #data-ndr-metrics BY overall_ndr DESC;

-- Trend analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS billing_month, size_segment
    METRICS overall_ndr, customer_count
    FILTERS last_12_months
) ORDER BY billing_month DESC, size_segment;

-- Customer movement analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS customer_movement, ndr_health
    METRICS customer_count, total_arr_change
    FILTERS latest_month
) ORDER BY customer_count DESC;
```

## 6. Sample Data Generation

### 6.1 Data Generation Script

```python
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

class NDRDataGenerator:
    def __init__(self, num_customers=500, start_date='2023-01-01', end_date='2025-01-01'):
        self.num_customers = num_customers
        self.start_date = pd.to_datetime(start_date)
        self.end_date = pd.to_datetime(end_date)
        
        # Segment distributions
        self.size_segments = {
            'SMB': 0.6,
            'Mid-Market': 0.3,
            'Enterprise': 0.1
        }
        
        self.trade_segments = {
            'HVAC': 0.35,
            'Plumbing': 0.25,
            'Electrical': 0.20,
            'Roofing': 0.10,
            'Other': 0.10
        }
        
        self.market_segments = {
            'West': 0.30,
            'East': 0.25,
            'Central': 0.25,
            'South': 0.20
        }
        
        self.product_categories = {
            'Core': 0.50,
            'Add-ons': 0.35,
            'Premium': 0.15
        }
        
    def generate_customers(self):
        """Generate customer master data"""
        customers = []
        
        for i in range(self.num_customers):
            customer = {
                'ndr_parent': f'CUST_{str(i+1).zfill(5)}',
                'parent_account_id': f'CUST_{str(i+1).zfill(5)}',
                'size_segment': np.random.choice(
                    list(self.size_segments.keys()),
                    p=list(self.size_segments.values())
                ),
                'trade_segment': np.random.choice(
                    list(self.trade_segments.keys()),
                    p=list(self.trade_segments.values())
                ),
                'market_segment': np.random.choice(
                    list(self.market_segments.keys()),
                    p=list(self.market_segments.values())
                ),
                'product_category': np.random.choice(
                    list(self.product_categories.keys()),
                    p=list(self.product_categories.values())
                ),
                'start_month': self.start_date + timedelta(
                    days=random.randint(0, 365)
                )
            }
            
            # Set base ARR based on size segment
            if customer['size_segment'] == 'Enterprise':
                customer['base_arr'] = np.random.uniform(100000, 1000000)
            elif customer['size_segment'] == 'Mid-Market':
                customer['base_arr'] = np.random.uniform(20000, 100000)
            else:  # SMB
                customer['base_arr'] = np.random.uniform(5000, 20000)
                
            # Set growth profile based on segments
            growth_factors = {
                'HVAC': 1.15,
                'Plumbing': 1.12,
                'Electrical': 1.10,
                'Roofing': 1.08,
                'Other': 1.05
            }
            
            customer['growth_rate'] = growth_factors.get(
                customer['trade_segment'], 1.05
            ) * np.random.uniform(0.9, 1.1)
            
            # Add some volatility
            customer['volatility'] = np.random.uniform(0.02, 0.08)
            
            customers.append(customer)
            
        return pd.DataFrame(customers)
    
    def generate_monthly_arr(self, customers_df):
        """Generate monthly ARR data with realistic patterns"""
        arr_data = []
        customer_cube_data = []
        
        # Generate month range
        months = pd.date_range(
            start=self.start_date,
            end=self.end_date,
            freq='MS'
        )
        
        for _, customer in customers_df.iterrows():
            current_arr = customer['base_arr']
            
            for month in months:
                # Skip if customer hasn't started yet
                if month < customer['start_month']:
                    continue
                
                month_id = int(month.strftime('%Y%m'))
                
                # Apply growth with seasonality
                month_num = month.month
                seasonal_factor = 1.0
                
                # Q4 typically sees higher expansion
                if month_num in [10, 11, 12]:
                    seasonal_factor = 1.02
                # Q1 might see some contraction
                elif month_num in [1, 2, 3]:
                    seasonal_factor = 0.98
                
                # Random walk with drift
                monthly_change = np.random.normal(
                    (customer['growth_rate'] - 1) / 12 * seasonal_factor,
                    customer['volatility']
                )
                
                # Apply bounds to prevent unrealistic changes
                monthly_change = max(-0.10, min(0.15, monthly_change))
                
                # Simulate churn (2% monthly probability for SMB, less for others)
                churn_prob = 0.02 if customer['size_segment'] == 'SMB' else 0.005
                if np.random.random() < churn_prob:
                    current_arr = 0
                
                # Simulate expansion events (5% probability)
                if np.random.random() < 0.05 and current_arr > 0:
                    current_arr *= np.random.uniform(1.1, 1.3)
                
                # Apply regular change if not churned
                if current_arr > 0:
                    current_arr *= (1 + monthly_change)
                    
                    # Simulate product upgrades based on category
                    if customer['product_category'] == 'Core' and np.random.random() < 0.03:
                        current_arr *= 1.2  # Upgrade to add-ons
                        customer['product_category'] = 'Add-ons'
                    elif customer['product_category'] == 'Add-ons' and np.random.random() < 0.01:
                        current_arr *= 1.15  # Upgrade to premium
                        customer['product_category'] = 'Premium'
                
                # Create ARR record
                arr_record = {
                    'ndr_parent': customer['ndr_parent'],
                    'month_id': month_id,
                    'billing_month': month,
                    'l3m_arr': round(current_arr, 2),
                    'load_date': datetime.now()
                }
                arr_data.append(arr_record)
                
                # Create customer cube record
                cube_record = {
                    'parent_account_id': customer['parent_account_id'],
                    'child_account_id': customer['parent_account_id'] + '_001',
                    'month_id': month_id,
                    'billing_month': month,
                    'size_segment': customer['size_segment'],
                    'trade_segment': customer['trade_segment'],
                    'market_segment': customer['market_segment'],
                    'product_category': customer['product_category'],
                    'monthly_amount': round(current_arr / 12, 2),
                    'l3m': round(current_arr, 2),
                    'load_date': datetime.now()
                }
                customer_cube_data.append(cube_record)
        
        return pd.DataFrame(arr_data), pd.DataFrame(customer_cube_data)
    
    def generate_all_data(self):
        """Generate complete dataset"""
        print("Generating customer data...")
        customers = self.generate_customers()
        
        print("Generating monthly ARR data...")
        arr_data, customer_cube = self.generate_monthly_arr(customers)
        
        return {
            'customers': customers,
            'arr_data': arr_data,
            'customer_cube': customer_cube
        }

# Generate sample data
generator = NDRDataGenerator(
    num_customers=500,
    start_date='2023-01-01',
    end_date='2025-01-01'
)

data = generator.generate_all_data()

# Save to CSV files for loading into Snowflake
data['arr_data'].to_csv('stg_metrics_st_ndr_l3m.csv', index=False)
data['customer_cube'].to_csv('fact_metrics_acme_customer_cube.csv', index=False)

print(f"Generated {len(data['customers'])} customers")
print(f"Generated {len(data['arr_data'])} monthly ARR records")
print(f"Generated {len(data['customer_cube'])} customer cube records")
```

## 7. Testing Strategy

### 7.1 Semantic View Validation

#### models/semantic/test_ndr_semantic_view.sql
```sql
{{
    config(
        materialized='ephemeral'
    )
}}

-- Test 1: Basic NDR metric
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    METRICS overall_ndr, customer_count
    FILTERS latest_month
);

-- Test 2: Segmentation analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS size_segment
    METRICS overall_ndr, customer_count, expansion_revenue, contraction_revenue
    FILTERS latest_month
) ORDER BY overall_ndr DESC;

-- Test 3: Trend analysis
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS billing_month
    METRICS overall_ndr, customer_count
    FILTERS last_12_months
) ORDER BY billing_month DESC;

-- Test 4: Customer movement
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS customer_movement
    METRICS customer_count, total_arr_change
    FILTERS latest_month
) ORDER BY customer_count DESC;

-- Test 5: Health category distribution
SELECT * FROM SEMANTIC_VIEW(
    ANALYTICS.SEMANTIC_MODELS.ndr_semantic_view
    DIMENSIONS ndr_health
    METRICS customer_count, average_ndr
    FILTERS latest_month
) ORDER